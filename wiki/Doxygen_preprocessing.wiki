= Preprocessing =

Source files that are used as input to doxygen can be parsed by doxygen's built-in C-preprocessor.

By default doxygen does only partial preprocessing. That is, it evaluates conditional compilation statements (like #if) and evaluates macro definitions, but it does not perform macro expansion.

So if you have the following code fragment *Parsing error* 

Then by default doxygen will feed the following to its parser:

 *Parsing error* 

You can disable all preprocessing by setting [Doxygen_config_1cfg_enable_preprocessing] to{{{NO}}}in the configuation file. In the case above doxygen will then read both statements, i.e:

 *Parsing error* 

In case you want to expand the{{{CONST_STRING}}}macro, you should set the [Doxygen_config_1cfg_macro_expansion] tag in the config file to{{{YES}}}. Then the result after preprocessing becomes:

 *Parsing error* 

Note that doxygen will now expand'all'macro definitions (recursively if needed). This is often too much. Therefore, doxygen also allows you to expand only those defines that you explicitly specify. For this you have to set the [Doxygen_config_1cfg_expand_only_predef] tag to{{{YES}}}and specify the macro definitions after the [Doxygen_config_1cfg_predefined] or [Doxygen_config_1cfg_expand_as_defined] tag.

A typically example where some help from the preprocessor is needed is when dealing with Microsoft's __declspec language extension. Here is an example function.

 *Parsing error* 

When nothing is done, doxygen will be confused and see __declspec as some sort of function. To help doxygen one typically uses the following preprocessor settings:

 *Parsing error* 

This will make sure the __declspec(dllexport) is removed before doxygen parses the source code.

For a more complex example, suppose you have the following obfuscated code fragment of an abstract base class called{{{IUnknown:}}}

 *Parsing error* 

without macro expansion doxygen will get confused, but we may not want to expand the REFIID macro, because it is documented and the user that reads the documentation should use it when implementing the interface.

By setting the following in the config file:

 *Parsing error* 

we can make sure that the proper result is fed to doxygen's parser: *Parsing error* 

Note that the [Doxygen_config_1cfg_predefined] tag accepts function like macro definitions (like{{{DECLARE_INTERFACE}}}), normal macro substitutions (like{{{PURE}}}and{{{THIS}}}) and plain defines (like{{{__cplusplus}}}).

Note also that preprocessor definitions that are normally defined automatically by the preprocessor (like{{{__cplusplus}}}), have to be defined by hand with doxygen's parser (this is done because these defines are often platform/compiler specific).

In some cases you may want to substitute a macro name or function by something else without exposing the result to further macro substitution. You can do this but using the{{{:=}}}operator instead of{{{=}}}

As an example suppose we have the following piece of code: *Parsing error* 

Then the only way to get doxygen interpret this as a class definition for class QList is to define: *Parsing error* 

Here is an example provided by Valter Minute and Reyes Ponce that helps doxygen to wade through the boilerplate code in Microsoft's ATL & MFC libraries:

 *Parsing error* 

As you can see doxygen's preprocessor is quite powerful, but if you want even more flexibility you can always write an input filter and specify it after the [Doxygen_config_1cfg_input_filter] tag.

If you are unsure what the effect of doxygen's preprocessing will be you can run doxygen as follows: *Parsing error* This will instruct doxygen to dump the input sources to standard output after preprocessing has been done (Hint: set{{{QUIET = YES}}}and{{{WARNINGS = NO}}}in the configuration file to disable any other output).



