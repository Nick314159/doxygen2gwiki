= Getting started =


The executable `doxygen` is the main program that parses the sources and generates the documentation. See section [Doxygen_doxygen_usage Doxygen usage]  for more detailed usage information.

The executable `doxytag` is only needed if you want to generate references to external documentation (i.e. documentation that was generated by doxygen) for which you do not have the sources. See section [Doxygen_doxytag_usage Doxytag usage]  for more detailed usage information.

Optionally, the executable `doxywizard` can be used, which is a [Doxygen_doxywizard_usage graphical front-end]  for editing the configuration file that is used by doxygen and for running doxygen in a graphical environment. For Mac OS X doxywizard will be started by clicking on the Doxygen application icon.

The following figure shows the relation between the tools and the flow of information between them (it looks complex but that's only because it tries to be complete):

Doxygen information flow Doxygen information flow

= Step 1: Creating a configuration file =

Doxygen uses a configuration file to determine all of its settings. Each project should get its own configuration file. A project can consist of a single source file, but can also be an entire source tree that is recursively scanned.

To simplify the creation of a configuration file, doxygen can create a template configuration file for you. To do this call `doxygen` from the command line with the `-g` option: 
{{{
doxygen -g <config-file>
}}}


where <config-file> is the name of the configuration file. If you omit the file name, a file named `Doxyfile` will be created. If a file with the name <config-file> already exists, doxygen will rename it to <config-file>.bak before generating the configuration template. If you use `-` (i.e. the minus sign) as the file name then doxygen will try to read the configuration file from standard input (`stdin`), which can be useful for scripting.

The configuration file has a format that is similar to that of a (simple) Makefile. It consists of a number of assignments (tags) of the form:

`TAGNAME = VALUE` or  `TAGNAME = VALUE1 VALUE2 ... `

You can probably leave the values of most tags in a generated template configuration file to their default value. See section [Doxygen_config Configuration]  for more details about the configuration file.

If you do not wish to edit the config file with a text editor, you should have a look at [Doxygen_doxywizard_usage doxywizard] , which is a GUI front-end that can create, read and write doxygen configuration files, and allows setting configuration options by entering them via dialogs.

For a small project consisting of a few C and/or C++ source and header files, you can leave INPUT  tag empty and doxygen will search for sources in the current directory.

If you have a larger project consisting of a source directory or tree you should assign the root directory or directories to the INPUT  tag, and add one or more file patterns to the FILE_PATTERNS  tag (for instance `*.cpp *.h`). Only files that match one of the patterns will be parsed (if the patterns are omitted a list of source extensions is used). For recursive parsing of a source tree you must set the RECURSIVE  tag to `YES`. To further fine-tune the list of files that is parsed the EXCLUDE  and EXCLUDE_PATTERNS  tags can be used. To omit all `test` directories from a source tree for instance, one could use: 
{{{
EXCLUDE_PATTERNS = */test/* 
}}}


Doxygen looks at the file's extension to determine how to parse a file. If a file has an `.idl` or `.odl` extension it is treated as an IDL file. If it has a `.java` extension it is treated as a file written in Java. Files ending with `.cs` are treated as C# files and the `.py` extension selects the Python parser. Finally, files with the extensions `.php`, `.php4`, `.inc` or `.phtml` are treated as PHP sources. Any other extension is parsed as if it is a C/C++ file, where files that end with `.m` are treated as Objective-C source files.

 If you start using doxygen for an existing project (thus without any documentation that doxygen is aware of), you can still get an idea of what the structure is and how the documented result would look like. To do so, you must set the EXTRACT_ALL  tag in the configuration file to `YES`. Then, doxygen will pretend everything in your sources is documented. Please note that as a consequence warnings about undocumented members will not be generated as long as EXTRACT_ALL  is set to `YES`.

To analyse an existing piece of software it is useful to cross-reference a (documented) entity with its definition in the source files. Doxygen will generate such cross-references if you set the SOURCE_BROWSER  tag to `YES`. It can also include the sources directly into the documentation by setting INLINE_SOURCES  to `YES` (this can be handy for code reviews for instance).

= Step 2: Running doxygen =

To generate the documentation you can now enter: 
{{{
doxygen <config-file>
}}}


Depending on your settings doxygen will create `html`, `rtf`, `latex`, `xml` and/or `man` directories inside the output directory. As the names suggest these directories contain the generated documentation in HTML, RTF, $\mbox{\LaTeX}$, XML and Unix-Man page format.

The default output directory is the directory in which `doxygen` is started. The root directory to which the output is written can be changed using the OUTPUT_DIRECTORY . The format specific directory within the output directory can be selected using the HTML_OUTPUT , RTF_OUTPUT , LATEX_OUTPUT , XML_OUTPUT , and MAN_OUTPUT  tags of the configuration file. If the output directory does not exist, `doxygen` will try to create it for you (but it will _not_ try to create a whole path recursively, like `mkdir -p` does).

= Step 3: Documenting the sources =

Although documenting the sources is presented as step 3, in a new project this should of course be step 1. Here I assume you already have some code and you want doxygen to generate a nice document describing the API and maybe the internals as well.

If the EXTRACT_ALL  option is set to `NO` in the configuration file (the default), then doxygen will only generate documentation for _documented_ members, files, classes and namespaces. So how do you document these? For members, classes and namespaces there are basically two options: 
 1. Place a _special_ documentation block in front of the declaration or definition of the member, class or namespace. For file, class and namespace members it is also allowed to place the documention directly after the member. See section [Doxygen_docblocks Special documentation blocks]  to learn more about special documentation blocks.
 2. Place a special documentation block somewhere else (another file or another location) _and_ put a _structural command_ in the documentation block. A structural command links a documentation block to a certain entity that can be documented (e.g. a member, class, namespace or file). See section [Doxygen_docblocks Documentation at other places]  to learn more about structural commands.
Files can only be documented using the second option, since there is no way to put a documentation block before a file. Of course, file members (functions, variable, typedefs, defines) do not need an explicit structural command; just putting a special documentation block in front or behind them will do.

The text inside a special documentation block is parsed before it is written to the HTML and/or $\mbox{\LaTeX}$ output files.

During parsing the following steps take place: 
 * The special commands inside the documentation are executed. See section [Doxygen_commands Special Commands]  for an overview of all commands.
 * If a line starts with some whitespace followed by one or more asterisks (`*`) and then optionally more whitespace, then all whitespace and asterisks are removed.
 * All resulting blank lines are treated as a paragraph separators. This saves you from placing new-paragraph commands yourself in order to make the generated documentation readable.
 * Links are created for words corresponding to documented classes (unless the word is preceded by a %; then the word will not be linked and the % sign is removed).
 * Links to members are created when certain patterns are found in the text. See section [Doxygen_autolink Automatic link generation]  for more information on how the automatic link generation works.
 * HTML tags that are in the documentation are interpreted and converted to $\mbox{\LaTeX}$ equivalents for the $\mbox{\LaTeX}$ output. See section [Doxygen_htmlcmds HTML Commands]  for an overview of all supported HTML tags.




